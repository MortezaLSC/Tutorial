//C example (What POINTERS is):

#include <stdio.h>

void south(int *lan, int *lon){

  *lan = *lan - 1;
  *lon = *lon + 1;
}

int main(){
  int lann = 32;
  int lonn = -64;

  south(&lann, &lonn);
  printf("The location is [%i, %i]\n", lann, lonn);
  return 0;
}
///////////////////////////////////////////////////////////

/*
%p == location in hex (base 16)

printf("%p", &a) ==== > Address of variable

Storing the address of variable somewhere:
int *address_of_a = & a              === > When we say south(&lann, &lonn) we say to function south that we are
                                            saying to function  know our addresses.

Reading contents of variables:
int contents = *address_of_a;        === > The same as *lan = *lan - 1 .

So after that when we say in print statement lann, lonn we mean get the address of lan and lon and show the contents 
in integer [%i, %i]

Change the content of address:
*address_of_a = 99                   === > It means we want to change the contents of address 
                                           to 99 || again the same as *lan = *lan - 1 .

NOTE:
The * and & operators are opposites. The & operator takes a piece of data and tells you where it’s stored. The * operator takes an address and tells you what’s stored there. Because pointers are sometimes called references, 
the * operator is said to dereference a pointer.

*/
